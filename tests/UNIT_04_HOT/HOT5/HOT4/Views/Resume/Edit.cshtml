@model HOT4.Models.Resume

@{
  string actionName;

  if (Model != null && Model.ResumeId != 0)
  {
    ViewBag.Title = "Edit Resume: " + Model.FullName;
    actionName = "Edit";
  }
  else
  {
    ViewBag.Title = "Create";
    actionName = "Create";
  }
}

@using (Html.BeginForm(actionName, "Resume", FormMethod.Post))
{
  @*@Html.ValidationSummary(false, null, new { @class = "text-danger", id = "NameError" })*@
  @Html.HiddenFor(x => x.ResumeId)
  <div class="form-horizontal">
    <div class="bg-light p-3">
      <h3>@ViewBag.Title</h3>
    </div>
    <hr />
    @Html.ValidationSummary(true, null, new { @class = "text-danger" })
    <div class="form-group">
      @Html.LabelFor(x => x.FullName)
      @Html.EditorFor(x => x.FullName, new { htmlAttributes = new { @class = "form-control", autocomplete = "name" } })
      @Html.ValidationMessageFor(x => x.FullName, "", new { @class = "text-danger" })
    </div>
    <div class="form-group">
      @Html.LabelFor(x => x.PhoneNumber)
      @Html.EditorFor(x => x.PhoneNumber, new { htmlAttributes = new { @class = "form-control", autocomplete = "tel" } })
      @Html.ValidationMessageFor(x => x.PhoneNumber, "", new { @class = "text-danger" })
    </div>
    <div class="form-group">
      @Html.LabelFor(x => x.EmailAddress)
      @Html.EditorFor(x => x.EmailAddress, new { htmlAttributes = new { @class = "form-control", autocomplete = "email" } })
      @Html.ValidationMessageFor(x => x.EmailAddress, "", new { @class = "text-danger" })
    </div>
    <div class="form-group">
      @Html.LabelFor(x => x.LinkedIn)
      @Html.EditorFor(x => x.LinkedIn, new { htmlAttributes = new { @class = "form-control", autocomplete = "url" } })
      @Html.ValidationMessageFor(x => x.LinkedIn, "", new { @class = "text-danger" })

    </div>
    @for (int i = 0; i < Model.Skills.Count; ++i)
    {
      <div class="card">
        <div class="card-body">
          @Html.HiddenFor(x => x.Skills[i].ResumeId)
          @Html.HiddenFor(x => x.Skills[i].SkillId)
          <div class="form-group">
            @Html.LabelFor(x => x.Skills[i].SkillName)
            @Html.EditorFor(x => x.Skills[i].SkillName, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(x => x.Skills[i].SkillName, "", new { @class = "text-danger" })
          </div>
          <div class="form-group">
            @Html.LabelFor(x => x.Skills[i].ExperienceLevel)
            @Html.EditorFor(x => x.Skills[i].ExperienceLevel, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(x => x.Skills[i].ExperienceLevel, "", new { @class = "text-danger" })
          </div>
        </div>
      </div>
    }
    @*<div class="form-group">
      @Html.LabelFor(x => x.Skills)
      @Html.EditorFor(x => x.Skills, new { htmlAttributes = new { @class = "form-control" } })
      @Html.ValidationMessageFor(x => x.Skills, "", new { @class = "text-danger" })
    </div>
    <div class="form-group">
      @Html.LabelFor(x => x.Projects)
      @Html.EditorFor(x => x.Projects, new { htmlAttributes = new { @class = "form-control" } })
      @Html.ValidationMessageFor(x => x.Projects, "", new { @class = "text-danger" })
    </div>
    <div class="form-group">
      @Html.LabelFor(x => x.Educations)
      @Html.EditorFor(x => x.Educations, new { htmlAttributes = new { @class = "form-control" } })
      @Html.ValidationMessageFor(x => x.Educations, "", new { @class = "text-danger" })
    </div>*@
    <div class="form-group">
      <fieldset>
        <legend>Photos </legend>
        @for (int i = 0; i < Model.Photos.Count; ++i)
        {
          var options = new SelectList(ViewBag.PhotoId, "PhotoId", "ImageName", Model.Photos[i].PhotoId);

          @Html.HiddenFor(x => x.Photos[i].ResumeId)
          @Html.DropDownListFor(x => x.Photos[i].PhotoId, options, "Please Select an Image...", new { @class = "form-control ResumePhotoDropDown" })
          @Html.ValidationMessageFor(x => x.Photos[i].PhotoId, null, new { @class = "text-danger" })
          <img src="@Url.Action("GetImage","Photo",new { photoId = Model.Photos[i].PhotoId })" alt="" height="100" class="ResumePhotoPreview" />
        }
      </fieldset>
    </div>
  </div>
  <div class="form-group">
    <button type="submit" class="btn btn-primary">
      <i class="fa-fw fas fa-save"></i>
      Save
    </button>
    <a class="btn btn-secondary" href="@Url.Action("Index", new { id = Model.ResumeId })">
      <i class="fa-fw fas fa-ban"></i>
      Cancel
    </a>
  </div>
  <div class="form-group">
    @Html.ValidationSummary(false, "", new { @class = "text-danger" })
  </div>
}

@section Scripts{
  <script>
    const resumeId = '@Model.ResumeId';
    let nameChangeHandler = null;

    function onNameChange() {
      const fullname = $("#FullName").val();
      if (!fullname) { return; }

      $.post('@Url.Action("GetResumeByName")'{ fullname })
        .done(function (data) {
          if (data && data.FullName == fullname && data.ResumeId != resumeId) {
            $('#NameError').html('That Name is already in use');
          }
          else {
            $('#NameError').html('');
          }
        })
        .fail(function (xhr, textStatus, errorThrown) {
          console.log(textStatus);
        });



    function onNameChangeDelayed() {
      clearTimeout(nameChangeHandler);
      nameChangeHandler = setTimeout(onNameChange,200)
    }

    $('#FullName').keyup(onNameChangeDelayed).blur(onNameChangeDelayed);

    $('.ResumePhotoDropDown').change(function () {
      const photoId = $(this).val();
      const src = '@Url.Action("GetImage","Photo")?photoId=' + photoId;
      this.next().next().attr('src', src);
    });
  </script>
}
