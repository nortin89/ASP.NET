@model HOT4.Models.Resume

@{
  ViewBag.Title = "Create";
}

@using (Html.BeginForm("Create", "Resume", FormMethod.Post))
{
  <div class="form-horizontal">
    <h4>Resume</h4>
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    <div class="form-group">
      @Html.LabelFor(x => x.FullName, htmlAttributes: new { @class = "control-label col-md-2" })
      <div class="col-md-10">
        @Html.EditorFor(x => x.FullName, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(x => x.FullName, "", new { @class = "text-danger" })
      </div>
    </div>
    <div class="form-group">
      @Html.LabelFor(x => x.PhoneNumber, htmlAttributes: new { @class = "form-control" })
      <div class="col-md-10">
        @Html.EditorFor(x => x.PhoneNumber, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(x => x.PhoneNumber, "", new { @class = "text-danger" })
      </div>
    </div>
    <div class="form-group">
      @Html.LabelFor(x => x.EmailAddress, htmlAttributes: new { @class = "form-control" })
      <div class="col-md-10">
        @Html.EditorFor(x => x.EmailAddress, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(x => x.EmailAddress, "", new { @class = "text-danger" })
      </div>
    </div>
    <div class="form-group">
      @Html.LabelFor(x => x.LinkedIn, htmlAttributes: new { @class = "form-control" })
      <div class="col-md-10">
        @Html.EditorFor(x => x.LinkedIn, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(x => x.LinkedIn, "", new { @class = "text-danger" })
      </div>
    </div>
    <div class="form-group">
      @Html.LabelFor(x => x.Skills, htmlAttributes: new { @class = "form-control" })
      <div class="col-md-10">
        @Html.EditorFor(x => x.Skills, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(x => x.Skills, "", new { @class = "text-danger" })
      </div>
    </div>
    <div class="form-group">
      @Html.LabelFor(x => x.Projects, htmlAttributes: new { @class = "form-control" })
      <div class="col-md-10">
        @Html.EditorFor(x => x.Projects, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(x => x.Projects, "", new { @class = "text-danger" })
      </div>
    </div>
    <div class="form-group">
      @Html.LabelFor(x => x.Educations, htmlAttributes: new { @class = "form-control" })
      <div class="col-md-10">
        @Html.EditorFor(x => x.Educations, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(x => x.Educations, "", new { @class = "text-danger" })
      </div>
      <fieldset class="form-group">
        <legend>Photos </legend>
        @for (int i = 0; i < Model.Photos.Count; ++i)
        {
          var options = new SelectList(ViewBag.PhotoId, "PhotoId", "ImageName", Model.Photos[i].PhotoId);

          @Html.HiddenFor(x => x.Photos[i].ResumeId)
          @Html.DropDownListFor(x => x.Photos[i].PhotoId, options, "Please Select an Image...", new { @class = "form-control" })
          @Html.ValidationMessageFor(x => x.Photos[i].PhotoId, null, new { @class = "text-danger" })
          <img src="@Url.Action("GetImage","Photo",new { photoId = Model.Photos[i].PhotoId })" alt="" height="100" class="ResumePhotoPreview" />
        }
      </fieldset>
    </div>
  </div>
  <div class="bg-light p-3">
    <button type="submit" class="btn btn-primary">Save</button>
    @Html.ActionLink("Cancel", "Index", null,
            htmlAttributes: new { @class = "btn btn-secondary" })
  </div>
}

@section Scripts{
  <script>
    const resumeId = '@Model.ResumeId';
    let nameChangeHandler = null;

    function onNameChange() {
      const name = $("#Name").val();
      if (!name) { return; }

      $.post('@Url.Action("GetResumeByName")'{ name })
        .done(function (data) {
          if (data && data.resumeId != resumeId) {
            $('Nameerror').html('That Name is already in use');
          }
          else {
            $('Nameerror').html('');
          }
        })
        .fail(function (xhr, textStatus, errorThrown) {
          console.log(textStatus);
        });
    }

    function onNameChangeDelayed() {
      clearTimeout(nameChangeHandler);
      nameChangeHandler = setTimeout(onNameChange,200)
    }

    $('#Name').keyup(onNameChangeDelayed).blur(onNameChangeDelayed);

    $('.ResumePhotoDropDown').change(function () {
      const photoId = $(this).val();
      const src = '@Url.Action("GetImage","Photo")?photoId=' + photoId;
      this.next().next().attr('src', src);
    });
  </script>
  }